#include <iostream>
#include <vector>
#include <queue>
#include <utility>

using namespace std;

class Solution {
  public:
    int numIslandsOld(vector<vector<char>>& grid) {
      int ret = 0;
      vector<vector<vector<int>>> roots(grid.size());
      for (int i = 0; i < grid.size(); ++i) {
        roots[i].resize(grid[i].size());
        for (int j = 0; j < grid[i].size(); ++j) {
          if (grid[i][j] == '0') {
            continue;
          }
          vector<int> temp;
          roots[i][j] = temp;
          bool isSet = false;
          if (i - 1 >= 0 && grid[i - 1][j] == '1') {
            roots[i][j] = roots[i - 1][j];
            isSet = true;
          }
          if (j - 1 >= 0 && grid[i][j - 1] == '1') {
            if (grid[i][j] == '1' && roots[i][j].size() > 0 && !this->equal(roots[i][j], roots[i][j - 1])) {
              for (int x = 0; x <= i; ++x) {
                for (int y = 0; y <= j; ++y) {
                  if (grid[x][y] == '1' && this->equal(roots[x][y], roots[i][j])) {
                    roots[x][y] = roots[i][j - 1];
                  }
                }
              }
              --ret;
            } else {
              roots[i][j] = roots[i][j - 1];
            }
            isSet = true;
          }
          if (!isSet) {
            temp = {i, j};
            roots[i][j] = temp;
            ++ret;
          }
        }
      }
      return ret;
    }
    bool equal(vector<int>& a, vector<int>& b) {
      return a[0] == b[0] && a[1] == b[1];
    }

    int numIslands(vector<vector<char>>& grid) {
      int ret = 0;
      queue<pair<int, int>> queue; 
      int rows = grid.size();
      int cols = 0;
      for (int x = 0; x < grid.size(); ++x) {
        cols = grid[x].size();
        for (int y = 0; y < grid[x].size(); ++y) {
          if (grid[x][y] == '1') {
            queue.push(make_pair(x, y));
            grid[x][y] = '2';
            while (!queue.empty()) {
              pair<int, int> front = queue.front();
              queue.pop();
              int i = front.first;
              int j = front.second;
              if (i - 1 >= 0 && grid[i - 1][j] == '1') {
                queue.push(make_pair(i - 1, j));
                grid[i - 1][j] = '2';
              }
              if (i + 1 < rows && grid[i + 1][j] == '1') {
                queue.push(make_pair(i + 1, j));
                grid[i + 1][j] = '2';
              }
              if (j - 1 >= 0 && grid[i][j - 1] == '1') {
                queue.push(make_pair(i, j - 1));
                grid[i][j - 1] = '2';
              }
              if (j + 1 < cols && grid[i][j + 1] == '1') {
                queue.push(make_pair(i, j + 1));
                grid[i][j + 1] = '2';
              }
            }
            ++ret;
          }
        }
      }
      return ret;
    }
};

int main() {
  Solution sln;
  vector<vector<char>> grid;
  // grid = {
  //   {'1', '1', '1', '1', '0'},
  //   {'1', '1', '0', '1', '0'},
  //   {'1', '1', '0', '0', '0'},
  //   {'0', '0', '0', '0', '0'}
  // };
  // grid = {
  //   {'1', '1', '0', '0', '0'},
  //   {'1', '1', '0', '0', '0'},
  //   {'0', '0', '1', '0', '0'},
  //   {'0', '0', '0', '1', '1'}
  // };
  // grid = {
  //   {'1', '1', '1'},
  //   {'0', '1', '0'},
  //   {'1', '1', '1'}
  // };
  grid = {
    {'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'},
    {'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'},
    {'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'},
    {'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
    {'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
    {'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'},
    {'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
    {'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
    {'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'},
    {'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'},
    {'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
  };
  std::cout << sln.numIslands(grid) << std::endl;

  return 0;
}
